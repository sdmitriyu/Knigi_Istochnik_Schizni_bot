from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InaccessibleMessage
from aiogram.filters import Command
from data.models import Greeting, Admin, Dialog
from config.keyboards import greetings_kb
from data.models import Books
from config.state_order_handlers import AskQuestionState
from aiogram.fsm.context import FSMContext
from typing import cast, Optional, Union
from datetime import datetime, timedelta
from config.logger_config import setup_logger, log_error, log_info, log_debug, log_warning

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = setup_logger('handlers')

router = Router()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞: {user_id: last_message_time}
spam_protection: dict[int, datetime] = {}

def is_spam(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ —Å–ø–∞–º–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    try:
        current_time = datetime.now()
        if user_id in spam_protection:
            last_message_time = spam_protection[user_id]
            if current_time - last_message_time < timedelta(seconds=5):  # 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                log_warning(logger, f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return True
        spam_protection[user_id] = current_time
        return False
    except Exception as e:
        log_error(logger, e, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–ø–∞–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return False

@router.message(Command("start"))
async def cmd_start(message: Message) -> None:
    try:
        if not message.from_user:
            log_warning(logger, "–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
            return
            
        log_debug(logger, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start", {"user_id": message.from_user.id})
            
        # Check if the user is an admin. If so, let the admin_router handle it.
        if Admin.get_or_none(Admin.user_id == message.from_user.id):
            log_debug(logger, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", {"user_id": message.from_user.id})
            return # Do not send a keyboard if the user is an admin

        great = Greeting.get_or_none()
        if great:
            log_debug(logger, "–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è", {"text": great.text[:50] + "..."})
            await message.answer(great.text, reply_markup=greetings_kb)
        else:
            log_warning(logger, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=greetings_kb)
    except Exception as e:
        log_error(logger, e, "–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ start")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(Command("help"))
async def help(message: Message) -> None:
    try:
        if not message.from_user:
            log_warning(logger, "–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
            return
            
        log_debug(logger, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help", {"user_id": message.from_user.id})
            
        help_text = (
            "üìö *–ë–æ—Ç –∫–Ω–∏–∂–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞*\n\n"
            "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "/start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            "*–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:*\n"
            "1. *–ì–∞–ª–µ—Ä–µ—è –∫–Ω–∏–≥* üìö\n"
            "   - –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–∏–≥\n"
            "   - –û–ø–∏—Å–∞–Ω–∏–µ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n"
            "   - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ª–∏—á–∏–∏\n\n"
            "2. *–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞* üõí\n"
            "   - –í—ã–±–æ—Ä –∫–Ω–∏–≥–∏\n"
            "   - –£–∫–∞–∑–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n"
            "   - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞\n\n"
            "3. *–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º* üí¨\n"
            "   - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
            "   - –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n"
            "   - –û–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞\n\n"
            "4. *–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞* üõ†\n"
            "   - –†–µ—à–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º\n"
            "   - –ü–æ–º–æ—â—å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞\n\n"
            "*–°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–∞:*\n"
            "üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑\n"
            "‚öôÔ∏è –í –æ–±—Ä–∞–±–æ—Ç–∫–µ\n"
            "üì¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω\n"
            "üì¶ –ö–Ω–∏–≥–∞ –∑–∞–±—Ä–∞–Ω–∞\n"
            "üöö –í –ø—É—Ç–∏\n"
            "‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω\n"
            "‚ùå –û—Ç–º–µ–Ω–µ–Ω\n\n"
            "*–í–∞–∂–Ω–æ:*\n"
            "‚Ä¢ –ó–∞–∫–∞–∑—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è\n"
            "‚Ä¢ –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤\n"
            "‚Ä¢ –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É"
        )
        
        log_debug(logger, "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–∫–∏", {"user_id": message.from_user.id})
        await message.answer(help_text, parse_mode="Markdown")
    except Exception as e:
        log_error(logger, e, "–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ help")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data == "books_gallery")
async def go_in_gallery(callback: CallbackQuery) -> None:
    try:
        if not callback.message or isinstance(callback.message, InaccessibleMessage):
            log_warning(logger, "–ü–æ–ª—É—á–µ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π callback message")
            await callback.answer()
            return
            
        log_debug(logger, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≥–∞–ª–µ—Ä–µ–∏ –∫–Ω–∏–≥", {"user_id": callback.from_user.id})
            
        books = Books.select()
        if not books:
            log_warning(logger, "–í –±–∞–∑–µ –Ω–µ—Ç –∫–Ω–∏–≥")
            message_obj = cast(Message, callback.message)
            await message_obj.answer(text="–í –±–∞–∑–µ –Ω–µ—Ç –∫–Ω–∏–≥.")
            await callback.answer()
            return
        
        for book in books:
            try:
                log_debug(logger, "–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–Ω–∏–≥–µ", {
                    "book_id": book.id,
                    "name": book.name,
                    "user_id": callback.from_user.id
                })
                
                if book.photo:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                    message_obj = cast(Message, callback.message)
                    await message_obj.answer_photo(book.photo)
                
                order_kb = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text=f"–ó–∞–∫–∞–∑–∞—Ç—å {book.name}", callback_data=f"order_book_{book.id}")]
                    ]
                )
                message_obj = cast(Message, callback.message)
                await message_obj.answer(
                    f"üìö *{book.name}*\n"
                    f"‚úçÔ∏è –ê–≤—Ç–æ—Ä: {book.author}\n"
                    f"üí∞ –¶–µ–Ω–∞: {book.price} —Ä—É–±.\n"
                    f"üì¶ –í –Ω–∞–ª–∏—á–∏–∏: {book.quantity} —à—Ç.\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {book.description}",
                    parse_mode="Markdown",
                    reply_markup=order_kb
                )
            except Exception as e:
                log_error(logger, e, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–Ω–∏–≥–µ {book.id}")
                continue
        
        message_obj = cast(Message, callback.message)
        await message_obj.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        await callback.answer()
    except Exception as e:
        log_error(logger, e, "–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ books_gallery")
        if callback.message and not isinstance(callback.message, InaccessibleMessage):
            message_obj = cast(Message, callback.message)
            await message_obj.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback.answer()

@router.callback_query(F.data.startswith("order_book_"))
async def process_order(callback: CallbackQuery):
    if not callback.data:
        log_warning(logger, "–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π callback_data")
        await callback.answer()
        return
        
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–Ω–∏–≥–∏ –∏–∑ callback_data
    try:
        book_id = int(callback.data.split("_")[-1])
        log_debug(logger, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ –∫–Ω–∏–≥–∏", {
            "book_id": book_id,
            "user_id": callback.from_user.id
        })
    except (ValueError, IndexError):
        log_error(logger, ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data"), f"callback_data: {callback.data}")
        if callback.message and isinstance(callback.message, Message) and not isinstance(callback.message, InaccessibleMessage):
            await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞")
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ
    book = Books.get_or_none(Books.id == book_id)
    if not book:
        log_warning(logger, f"–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", {"book_id": book_id})
        if callback.message and isinstance(callback.message, Message) and not isinstance(callback.message, InaccessibleMessage):
            await callback.message.answer("–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await callback.answer()
        return
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    if callback.message and isinstance(callback.message, Message) and not isinstance(callback.message, InaccessibleMessage):
        log_debug(logger, "–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞", {
            "book_id": book.id,
            "name": book.name,
            "user_id": callback.from_user.id
        })
        await callback.message.answer(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–Ω–∏–≥—É:\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {book.name}\n"
            f"–ê–≤—Ç–æ—Ä: {book.author}\n"
            f"–¶–µ–Ω–∞: {book.price} —Ä—É–±.\n\n"
            f"–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            f"–§–ò–û, –∞–¥—Ä–µ—Å, —Ç–µ–ª–µ—Ñ–æ–Ω"
        )
    await callback.answer()

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
@router.callback_query(F.data == "ask_question_start")
async def ask_question_start(callback: CallbackQuery, state: FSMContext):
    try:
        if not callback.message or isinstance(callback.message, InaccessibleMessage):
            log_warning(logger, "–ü–æ–ª—É—á–µ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π callback message –≤ ask_question_start")
            await callback.answer()
            return
            
        log_debug(logger, "–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–¥–∞–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞", {"user_id": callback.from_user.id})
        
        message_obj = cast(Message, callback.message)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –∫—Ä–æ–º–µ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏
        admins = Admin.select().where(Admin.role == 'admin')
        
        keyboard_buttons = []
        for admin in admins:
            if admin.display_name:
                keyboard_buttons.append([InlineKeyboardButton(text=admin.display_name, callback_data=f"select_admin_for_question_{admin.user_id}")])
        
        if not keyboard_buttons:
            log_warning(logger, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤", {})
            await message_obj.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
            await callback.answer()
            return

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        await state.set_state(AskQuestionState.choose_admin) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        
        await message_obj.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:", reply_markup=keyboard)
        await callback.answer()
    except Exception as e:
        log_error(logger, e, "–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ ask_question_start")
        if callback.message and not isinstance(callback.message, InaccessibleMessage):
            message_obj = cast(Message, callback.message)
            await message_obj.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback.answer()

@router.callback_query(AskQuestionState.choose_admin, F.data.startswith("select_admin_for_question_"))
async def select_admin_for_question(callback: CallbackQuery, state: FSMContext):
    try:
        if not callback.message or isinstance(callback.message, InaccessibleMessage):
            log_warning(logger, "–ü–æ–ª—É—á–µ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π callback message –≤ select_admin_for_question")
            await callback.answer()
            return

        message_obj = cast(Message, callback.message)
        
        if not callback.data:
            log_warning(logger, "–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π callback_data –≤ select_admin_for_question", {})
            await message_obj.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            await callback.answer()
            return

        try:
            admin_user_id = int(callback.data.split("_")[-1])
            log_debug(logger, "–í—ã–±—Ä–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞", {"admin_user_id": admin_user_id, "user_id": callback.from_user.id})
        except (ValueError, IndexError):
            log_error(logger, ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"), f"callback_data: {callback.data}")
            await message_obj.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            await callback.answer()
            return

        admin = Admin.get_or_none(Admin.user_id == admin_user_id)
        if not admin:
            log_warning(logger, "–í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", {"admin_user_id": admin_user_id})
            await message_obj.answer("–í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            await callback.answer()
            return
        
        await state.update_data(selected_admin_id=admin_user_id)
        await state.set_state(AskQuestionState.input_question)
        
        await message_obj.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin.display_name or admin.user_name}. –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
        await callback.answer()
    except Exception as e:
        log_error(logger, e, "–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ select_admin_for_question")
        if callback.message and not isinstance(callback.message, InaccessibleMessage):
            message_obj = cast(Message, callback.message)
            await message_obj.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback.answer()

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@router.message(AskQuestionState.input_question)
async def process_user_question(message: Message, state: FSMContext):
    try:
        if not message.from_user or not message.text:
            log_warning(logger, "–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞ –≤ process_user_question")
            return
            
        user_id = message.from_user.id
        question_text = message.text
        
        log_debug(logger, "–ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", {"user_id": user_id, "question": question_text[:50] + "..."})

        data = await state.get_data()
        selected_admin_id = data.get('selected_admin_id')

        if not selected_admin_id:
            log_error(logger, ValueError("ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏"), f"user_id: {user_id}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            await state.clear()
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ Dialog
        dialog = Dialog.create(
            user_id=user_id,
            admin_id=selected_admin_id,
            question=question_text,
            created_at=datetime.now(),
            updated_at=datetime.now(),
            is_closed=False
        )
        log_info(logger, "–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω", {"dialog_id": dialog.id, "user_id": user_id, "admin_id": selected_admin_id})

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin = Admin.get_or_none(Admin.user_id == selected_admin_id)
        if admin:
            try:
                reply_markup = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_to_question_{dialog.id}")],
                    [InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥", callback_data=f"close_dialog_{dialog.id}")]
                ])
                if message.bot:
                    await message.bot.send_message(
                        chat_id=admin.user_id,
                        text=f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.full_name} (@{message.from_user.username or 'N/A'}):\n\n{question_text}",
                        reply_markup=reply_markup
                    )
                    log_info(logger, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –Ω–æ–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ", {"admin_id": admin.user_id, "dialog_id": dialog.id})
                else:
                    log_warning(logger, "–ë–æ—Ç –æ–±—ä–µ–∫—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", {"admin_id": admin.user_id})
                    dialog.is_closed = True # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, —á—Ç–æ–±—ã –¥–∏–∞–ª–æ–≥ –Ω–µ –≤–∏—Å–µ–ª –æ—Ç–∫—Ä—ã—Ç—ã–º
                    dialog.save()
                    await message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.")
                    await state.clear()
                    return
            except Exception as e:
                log_error(logger, e, f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin.user_id} –æ –Ω–æ–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ. User ID: {user_id}, Question: {question_text[:50]}...")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥ –∏–ª–∏ –ø–æ–º–µ—Ç–∏—Ç—å –µ–≥–æ –∫–∞–∫ —Ç—Ä–µ–±—É—é—â–∏–π –≤–Ω–∏–º–∞–Ω–∏—è
                dialog.is_closed = True # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, —á—Ç–æ–±—ã –¥–∏–∞–ª–æ–≥ –Ω–µ –≤–∏—Å–µ–ª –æ—Ç–∫—Ä—ã—Ç—ã–º
                dialog.save()
                await message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.")
                await state.clear()
                return
        else:
            log_warning(logger, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω", {"selected_admin_id": selected_admin_id})
            await message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
            await state.clear()
            return

        await message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞!")
        await state.clear()
    except Exception as e:
        log_error(logger, e, "–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ process_user_question")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data.startswith("reply_to_question_"))
async def reply_to_question(callback: CallbackQuery, state: FSMContext) -> None:
    if not callback.data or not callback.message or isinstance(callback.message, InaccessibleMessage):
        await callback.answer()
        return

    try:
        dialog_id = int(callback.data.split("_")[-1])
        dialog = Dialog.get_or_none(Dialog.id == dialog_id)
        
        if not dialog:
            await callback.answer("‚ùå –î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        if dialog.is_closed:
            await callback.answer("‚ùå –≠—Ç–æ—Ç –¥–∏–∞–ª–æ–≥ —É–∂–µ –∑–∞–∫—Ä—ã—Ç", show_alert=True)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–∏–∞–ª–æ–≥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(AskQuestionState.input_answer)
        await state.update_data(dialog_id=dialog_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –æ—Ç–≤–µ—Ç
        message_obj = cast(Message, callback.message)
        await message_obj.edit_text(
            f"{message_obj.text}\n\n"
            f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:"
        )
        await callback.answer()
    except (ValueError, IndexError) as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ID –¥–∏–∞–ª–æ–≥–∞", show_alert=True)
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.message(AskQuestionState.input_answer)
async def process_admin_answer(message: Message, state: FSMContext):
    if not message.text or not message.bot:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç.")
        return

    data = await state.get_data()
    dialog_id = data.get("dialog_id")
    
    if not dialog_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥")
        await state.clear()
        return

    dialog = Dialog.get_or_none(Dialog.id == dialog_id)
    if not dialog:
        await message.answer("‚ùå –î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return

    if dialog.is_closed:
        await message.answer("‚ùå –≠—Ç–æ—Ç –¥–∏–∞–ª–æ–≥ —É–∂–µ –∑–∞–∫—Ä—ã—Ç")
        await state.clear()
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–ª–æ–≥
    dialog.answer = message.text
    dialog.save()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        response_message = (
            f"üì¨ *–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:*\n\n"
            f"{message.text}\n\n"
            f"üí¨ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞–≤ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
        )
        await message.bot.send_message(dialog.user_id, response_message, parse_mode="Markdown")
        await message.answer("‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
    finally:
        await state.clear()

@router.callback_query(F.data.startswith("close_dialog_"))
async def close_dialog(callback: CallbackQuery):
    if not callback.data or not callback.message or isinstance(callback.message, InaccessibleMessage) or not callback.bot:
        await callback.answer()
        return

    try:
        dialog_id = int(callback.data.split("_")[-1])
        dialog = Dialog.get_or_none(Dialog.id == dialog_id)
        
        if not dialog:
            await callback.answer("‚ùå –î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        if dialog.is_closed:
            await callback.answer("‚ùå –≠—Ç–æ—Ç –¥–∏–∞–ª–æ–≥ —É–∂–µ –∑–∞–∫—Ä—ã—Ç", show_alert=True)
            return

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
        dialog.is_closed = True
        dialog.save()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await callback.bot.send_message(
                dialog.user_id,
                "üîí –î–∏–∞–ª–æ–≥ –∑–∞–∫—Ä—ã—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥."
            )
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

        message_obj = cast(Message, callback.message)
        await message_obj.edit_text(
            f"{message_obj.text}\n\n"
            f"üîí –î–∏–∞–ª–æ–≥ –∑–∞–∫—Ä—ã—Ç"
        )
        await callback.answer("‚úÖ –î–∏–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç")
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
@router.message(lambda message: not message.text.startswith('/'))
async def continue_dialog(message: Message):
    if not message.from_user or not message.bot:
        return

    # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    dialog = Dialog.get_or_none(
        (Dialog.user_id == message.from_user.id) & 
        (Dialog.is_closed == False)
    )

    if not dialog:
        return  # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

    # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin = Admin.get_or_none(Admin.user_id == dialog.admin_id)
    if not admin:
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–≤–µ—Ç–∞
    reply_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_to_question_{dialog.id}")],
            [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥", callback_data=f"close_dialog_{dialog.id}")]
        ]
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    try:
        await message.bot.send_message(
            admin.user_id,
            f"üí¨ *–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–∏–∞–ª–æ–≥–µ #{dialog.id}*\n\n"
            f"*–û—Ç:* {message.from_user.full_name} (ID: `{message.from_user.id}`)\n"
            f"*–°–æ–æ–±—â–µ–Ω–∏–µ:* {message.text}",
            parse_mode="Markdown",
            reply_markup=reply_kb
        )
        await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞"
@router.callback_query(F.data == "contact_tech_support")
async def contact_tech_support(callback: CallbackQuery, state: FSMContext):
    try:
        if not callback.message or isinstance(callback.message, InaccessibleMessage):
            log_warning(logger, "–ü–æ–ª—É—á–µ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π callback message –≤ contact_tech_support")
            await callback.answer()
            return
            
        user_id = callback.from_user.id
        tech_support_id = 5069224643  # –ó–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–π ID —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏
        
        log_debug(logger, "–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–≤—è–∑—å —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", {"user_id": user_id})

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—ã–π –¥–∏–∞–ª–æ–≥ —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
        existing_dialog = Dialog.get_or_none(
            (Dialog.user_id == user_id) & 
            (Dialog.admin_id == tech_support_id) & 
            (Dialog.is_closed == False)
        )

        if existing_dialog:
            log_info(logger, "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π –¥–∏–∞–ª–æ–≥ —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", {"user_id": user_id, "dialog_id": existing_dialog.id})
            message_obj = cast(Message, callback.message)
            await message_obj.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π –¥–∏–∞–ª–æ–≥ —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞.")
            await callback.answer()
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ Dialog
        dialog = Dialog.create(
            user_id=user_id,
            admin_id=tech_support_id,
            question="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤—è–∑—å —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.", # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            created_at=datetime.now(),
            updated_at=datetime.now(),
            is_closed=False
        )
        log_info(logger, "–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–æ–∑–¥–∞–Ω", {"dialog_id": dialog.id, "user_id": user_id, "admin_id": tech_support_id})

        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É
        try:
            reply_markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_to_question_{dialog.id}")],
                [InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥", callback_data=f"close_dialog_{dialog.id}")]
            ])
            if callback.bot:
                await callback.bot.send_message(
                    chat_id=tech_support_id,
                    text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.full_name} (@{callback.from_user.username or 'N/A'}) –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤—è–∑—å —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.\n\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}",
                    reply_markup=reply_markup
                )
                log_info(logger, "–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∞ –æ –∑–∞–ø—Ä–æ—Å–µ", {"admin_id": tech_support_id, "dialog_id": dialog.id})
            else:
                log_warning(logger, "–ë–æ—Ç –æ–±—ä–µ–∫—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–µ.", {"tech_support_id": tech_support_id})
                dialog.is_closed = True # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
                dialog.save()
                message_obj = cast(Message, callback.message)
                await message_obj.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑–∏ —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π. –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.")
                await callback.answer()
                return
        except Exception as e:
            log_error(logger, e, f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É {tech_support_id} –æ –∑–∞–ø—Ä–æ—Å–µ. User ID: {user_id}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É, –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥ –∏–ª–∏ –ø–æ–º–µ—Ç–∏—Ç—å –µ–≥–æ –∫–∞–∫ —Ç—Ä–µ–±—É—é—â–∏–π –≤–Ω–∏–º–∞–Ω–∏—è
            dialog.is_closed = True # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
            dialog.save()
            message_obj = cast(Message, callback.message)
            await message_obj.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑–∏ —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π. –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.")
            await callback.answer()
            return

        message_obj = cast(Message, callback.message)
        await message_obj.answer("–ú—ã —É–≤–µ–¥–æ–º–∏–ª–∏ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É –æ –≤–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞!")
        await callback.answer()
    except Exception as e:
        log_error(logger, e, "–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ contact_tech_support")
        if callback.message and not isinstance(callback.message, InaccessibleMessage):
            message_obj = cast(Message, callback.message)
            await message_obj.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback.answer()