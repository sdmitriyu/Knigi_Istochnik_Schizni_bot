from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram import Router, F
from data.models import Order, Books, OrderStatus
from config.logger_config import setup_logger, log_error, log_info, log_debug, log_warning
from typing import Optional, cast, Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = setup_logger('state_order_handlers')

router = Router()

class UserOrderState(StatesGroup):
    waiting_for_fio = State()
    waiting_for_address = State()
    waiting_for_phone = State()
    waiting_for_confirmation = State()

class AskQuestionState(StatesGroup):
    choose_admin = State()
    input_question = State()
    input_answer = State()

@router.callback_query(F.data.startswith("order_book_"))
async def order_book(callback: CallbackQuery, state: FSMContext):
    if not callback.data:
        await callback.answer()
        return
        
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–Ω–∏–≥–∏ –∏–∑ callback_data
    try:
        book_id = int(callback.data.split("_")[-1])
    except (ValueError, IndexError):
        if callback.message and isinstance(callback.message, Message):
            await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞")
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ
    book = Books.get_or_none(Books.id == book_id)
    if not book:
        if callback.message and isinstance(callback.message, Message):
            await callback.message.answer("–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await callback.answer()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        book_id_from_fsm=book.id,
        book_info=f"{book.name} - {book.author}"
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await state.set_state(UserOrderState.waiting_for_fio)
    if callback.message and isinstance(callback.message, Message):
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    await callback.answer()

@router.message(UserOrderState.waiting_for_fio)
async def process_name(message:Message, state:FSMContext):
    fio = message.text
    if not fio:
        await message.reply(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –§–ò–û.")
        return
    await state.update_data(fio = message.text)
    await state.set_state(UserOrderState.waiting_for_address)
    await message.answer(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏.")

@router.message(UserOrderState.waiting_for_address)
async def addres_state(message:Message, state:FSMContext):
    addres = message.text
    if not addres:
        await message.reply(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏.")
        return
    await state.update_data(addres = message.text)
    await state.set_state(UserOrderState.waiting_for_phone)
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏.")

@router.message(UserOrderState.waiting_for_phone)
async def phone_state(message:Message, state:FSMContext):
    phone = message.text
    if not phone:
        await message.reply(text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        return
    await state.update_data(phone = message.text)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    
    if not message.from_user:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    user_id = message.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    Order.create(
        telegram_id=user_id,
        fio=data['fio'],
        addres=data['addres'],
        phone=data['phone'],
        book_id=data['book_id_from_fsm'],
        book_info=data['book_info']
    )
    
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    await state.clear()

@router.message(cast(State, UserOrderState.waiting_for_fio))
async def process_fio(message: Message, state: FSMContext):
    try:
        if not message.from_user:
            log_warning(logger, "–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
            return
            
        log_debug(logger, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –§–ò–û", {"user_id": message.from_user.id})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        if not message.text:
            log_warning(logger, "–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", {"user_id": message.from_user.id})
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û —Ç–µ–∫—Å—Ç–æ–º.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –§–ò–û
        await state.update_data(fio=message.text)
        log_debug(logger, "–§–ò–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ", {"user_id": message.from_user.id, "fio": message.text})

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
        await state.set_state(cast(State, UserOrderState.waiting_for_address))
    except Exception as e:
        log_error(logger, e, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –§–ò–û")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@router.message(cast(State, UserOrderState.waiting_for_address))
async def process_address(message: Message, state: FSMContext):
    try:
        if not message.from_user:
            log_warning(logger, "–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
            return
            
        log_debug(logger, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞", {"user_id": message.from_user.id})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        if not message.text:
            log_warning(logger, "–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", {"user_id": message.from_user.id})
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–µ–∫—Å—Ç–æ–º.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å
        await state.update_data(address=message.text)
        log_debug(logger, "–ê–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω", {"user_id": message.from_user.id, "address": message.text})

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        await state.set_state(cast(State, UserOrderState.waiting_for_phone))
    except Exception as e:
        log_error(logger, e, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥—Ä–µ—Å–∞")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@router.message(cast(State, UserOrderState.waiting_for_phone))
async def process_phone(message: Message, state: FSMContext):
    try:
        if not message.from_user:
            log_warning(logger, "–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
            return
            
        log_debug(logger, "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞", {"user_id": message.from_user.id})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        if not message.text:
            log_warning(logger, "–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", {"user_id": message.from_user.id})
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ç–µ–∫—Å—Ç–æ–º.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
        await state.update_data(phone=message.text)
        log_debug(logger, "–¢–µ–ª–µ—Ñ–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω", {"user_id": message.from_user.id, "phone": message.text})

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        data: Dict[str, Any] = await state.get_data()
        book_id: Optional[int] = data.get('book_id')
        
        if not book_id:
            log_error(logger, ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç book_id –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è"), "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return
            
        log_debug(logger, "–ü–æ–ª—É—á–µ–Ω—ã –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞", {
            "user_id": message.from_user.id,
            "book_id": book_id,
            "fio": data.get('fio'),
            "address": data.get('address'),
            "phone": data.get('phone')
        })

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ
        book = Books.get_or_none(Books.id == book_id)
        if not book:
            log_error(logger, ValueError(f"–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {book_id}"), "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–Ω–∏–≥–µ")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirmation_text = (
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:\n\n"
            f"üìö –ö–Ω–∏–≥–∞: {book.name}\n"
            f"‚úçÔ∏è –ê–≤—Ç–æ—Ä: {book.author}\n"
            f"üí∞ –¶–µ–Ω–∞: {book.price} —Ä—É–±.\n\n"
            f"üë§ –§–ò–û: {data['fio']}\n"
            f"üìç –ê–¥—Ä–µ—Å: {data['address']}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n\n"
            f"–í—Å–µ –≤–µ—Ä–Ω–æ?"
        )
        
        await message.answer(confirmation_text)
        await state.set_state(cast(State, UserOrderState.waiting_for_confirmation))
    except Exception as e:
        log_error(logger, e, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@router.message(cast(State, UserOrderState.waiting_for_confirmation))
async def process_confirmation(message: Message, state: FSMContext):
    try:
        if not message.from_user:
            log_warning(logger, "–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
            return
            
        log_debug(logger, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞", {"user_id": message.from_user.id})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        if message.text and message.text.lower() not in ['–¥–∞', 'yes', '–≤–µ—Ä–Ω–æ', '–ø—Ä–∞–≤–∏–ª—å–Ω–æ']:
            log_warning(logger, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑", {"user_id": message.from_user.id})
            await message.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        data: Dict[str, Any] = await state.get_data()
        book_id: Optional[int] = data.get('book_id')
        
        if not book_id:
            log_error(logger, ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç book_id –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è"), "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return
            
        log_debug(logger, "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞", {
            "user_id": message.from_user.id,
            "book_id": book_id,
            "fio": data.get('fio'),
            "address": data.get('address'),
            "phone": data.get('phone')
        })

        # –ü–æ–ª—É—á–∞–µ–º –∫–Ω–∏–≥—É
        book = Books.get_or_none(Books.id == book_id)
        if not book:
            log_error(logger, ValueError(f"–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {book_id}"), "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–Ω–∏–≥–µ")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å "–Ω–æ–≤—ã–π"
        new_status = OrderStatus.get_or_none(OrderStatus.name == 'new')
        if not new_status:
            log_error(logger, ValueError("–°—Ç–∞—Ç—É—Å 'new' –Ω–µ –Ω–∞–π–¥–µ–Ω"), "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await state.clear()
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order = Order.create(
            telegram_id=message.from_user.id,
            fio=data['fio'],
            addres=data['address'],
            phone=data['phone'],
            book_id=book.id,
            book_info=f"{book.name} - {book.author}",
            status=new_status
        )
        
        log_info(logger, "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω", {"order_id": order.id})
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await message.answer(
            "‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
            "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.\n"
            "–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –º–æ–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –∑–∞–∫–∞–∑—ã'."
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
    except Exception as e:
        log_error(logger, e, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
