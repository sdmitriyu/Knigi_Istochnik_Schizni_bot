from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from data.models import db, Greeting, Admin
from aiogram.fsm.context import FSMContext
from admin.state_book import GreetingTextState
from config.keyboards import texts_menu_kb
from typing import cast

admin_great_router = Router()

async def is_admin_filter(message: Message) -> bool:
    if not message.from_user:
        return False
    return Admin.get_or_none(Admin.user_id == message.from_user.id) is not None

admin_great_router.message.filter(is_admin_filter)

# –°—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω, –≤–º–µ—Å—Ç–æ –Ω–µ–≥–æ –±—É–¥—É—Ç FSM-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
# @admin_router.message(F.text.startswith("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"))
# async def edit_hello(message: Message):
#     try:
#         if not message.text:
#             await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è")
#             return
            
#         # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
#         new_text = message.text.replace("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", "").strip()
#         if not new_text:
#             await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã")
#             return
            
#         greeting = Greeting.get_or_none()
#         if greeting:
#             greeting.text = new_text
#             greeting.save()
#             status = "–æ–±–Ω–æ–≤–ª–µ–Ω–æ"
#         else:
#             greeting = Greeting.create(text=new_text)
#             status = "—Å–æ–∑–¥–∞–Ω–æ"
#         await message.answer(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ {status}!")
#     except Exception as e:
#         await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {str(e)}")

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"
@admin_great_router.message(F.text == "üëã –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")
async def show_greeting_text_for_edit(message: Message):
    greeting_obj = Greeting.get_or_none()
    current_text = greeting_obj.text if greeting_obj else "*–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.*"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", callback_data="edit_greeting_text_inline")]
    ])

    await message.answer(
        f"""*–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:*
{current_text}""",
        parse_mode="Markdown",
        reply_markup=keyboard
    )

@admin_great_router.callback_query(F.data == "edit_greeting_text_inline")
async def edit_greeting_text_inline(callback_query: CallbackQuery, state: FSMContext):
    await state.set_state(GreetingTextState.text)
    if callback_query.message:
        message_obj = cast(Message, callback_query.message)
        await message_obj.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:")
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
@admin_great_router.message(GreetingTextState.text)
async def process_greeting_text(message: Message, state: FSMContext):
    if not message.text or len(message.text.strip()) < 5:
        await message.answer("–¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", reply_markup=texts_menu_kb)
        return
    
    try:
        greeting_obj = Greeting.get_or_none()
        if greeting_obj:
            greeting_obj.text = message.text.strip()
            greeting_obj.save()
            status = "–æ–±–Ω–æ–≤–ª–µ–Ω"
        else:
            Greeting.create(text=message.text.strip())
            status = "—Å–æ–∑–¥–∞–Ω"
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ {status}!", reply_markup=texts_menu_kb)
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {str(e)}", reply_markup=texts_menu_kb)
    finally:
        await state.clear()

