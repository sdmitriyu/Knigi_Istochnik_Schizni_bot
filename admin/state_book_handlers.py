from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from data.models import Books, Order, Greeting, Admin, OrderStatus
from config.keyboards import commands, books_menu_kb, orders_menu_kb, texts_menu_kb, admins_menu_kb, greetings_kb # –û–±–Ω–æ–≤–∏–ª –∏–º–ø–æ—Ä—Ç—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä
from config.static import HELP_TEXT
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from admin.state_book import BookState, OrderAdminState, BookEditState # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç BookEditState
from typing import cast # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç cast
from config.logger_config import setup_logger, log_debug, log_info, log_error

admin_router = Router()

logger = setup_logger('admin_state_book_handlers')

async def is_admin_filter(message: Message) -> bool:
    if not message.from_user:
        log_debug(logger, "is_admin_filter: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.", {})
        return False
    
    user_id = message.from_user.id
    is_admin = Admin.get_or_none(Admin.user_id == user_id) is not None
    log_debug(logger, f"is_admin_filter: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –†–µ–∑—É–ª—å—Ç–∞—Ç: {is_admin}", {"user_id": user_id, "is_admin": is_admin})
    return is_admin

admin_router.message.filter(is_admin_filter)

@admin_router.message(Command("start"))
async def start(message: Message):
    log_debug(logger, "–í—Ö–æ–¥ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ start", {"user_id": message.from_user.id if message.from_user else None})
    try:
        if not message.from_user:
            log_error(logger, Exception("–ù–µ—Ç from_user"), "start: –ù–µ—Ç from_user")
            return
        await message.answer("–û—á–∏—â–∞—é –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É...", reply_markup=ReplyKeyboardRemove())
        await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=commands)
    except Exception as e:
        log_error(logger, e, "–û—à–∏–±–∫–∞ –≤ start")

@admin_router.message(Command("help"))
async def help_command(message: Message):
    log_debug(logger, "–í—Ö–æ–¥ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ help_command", {"user_id": message.from_user.id if message.from_user else None})
    try:
        await message.answer(HELP_TEXT, parse_mode="Markdown", reply_markup=commands)
    except Exception as e:
        log_error(logger, e, "–û—à–∏–±–∫–∞ –≤ help_command")

# –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é
@admin_router.message(F.text == "üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∞–º–∏")
async def manage_books(message: Message):
    log_debug(logger, "–í—Ö–æ–¥ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ manage_books", {"user_id": message.from_user.id if message.from_user else None})
    try:
        await message.answer("üìö –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∞–º–∏.", reply_markup=books_menu_kb)
    except Exception as e:
        log_error(logger, e, "–û—à–∏–±–∫–∞ –≤ manage_books")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ —Ä–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∞–º–∏.", reply_markup=books_menu_kb)

@admin_router.message(F.text == "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏")
async def manage_orders(message: Message):
    await message.answer("üì¶ –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏.", reply_markup=orders_menu_kb)

@admin_router.message(F.text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏")
async def manage_admins(message: Message):
    await message.answer("üë• –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.", reply_markup=admins_menu_kb)

@admin_router.message(F.text == "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞–º–∏")
async def manage_texts(message: Message):
    await message.answer("üìù –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞–º–∏.", reply_markup=texts_menu_kb)

@admin_router.message(F.text == "üè† –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: Message, state: FSMContext):
    await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer("üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=commands)

@admin_router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.", reply_markup=commands)
        return
    
    await state.clear()
    await message.answer(
        "‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=commands
    )

@admin_router.message(F.text == "üìö –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–∏–≥–∏")
async def show_books_with_inline_buttons(message: Message):
    books = Books.select()
    if not books:
        await message.answer("üìö –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –∫–Ω–∏–≥.", reply_markup=books_menu_kb)
        return
        
    for book in books:
        if book.photo:
            await message.answer_photo(book.photo)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–Ω–∏–≥—É", callback_data=f"edit_book_{book.id}"),
             InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É", callback_data=f"delete_book_{book.id}")]
        ])
        
        await message.answer(
            f"üìö *{book.name}*\n"
            f"‚úçÔ∏è –ê–≤—Ç–æ—Ä: {book.author}\n"
            f"üí∞ –¶–µ–Ω–∞: {book.price} —Ä—É–±.\n"
            f"üì¶ –í –Ω–∞–ª–∏—á–∏–∏: {book.quantity} —à—Ç.\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {book.description}",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
    await message.answer("üìö –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=books_menu_kb)

@admin_router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É")
async def add_book(message: Message, state: FSMContext):
    await state.set_state(BookState.name)
    await message.answer("üìö –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:", reply_markup=books_menu_kb)

@admin_router.message(BookState.name)   
async def process_book_name(message: Message, state: FSMContext):
    if not message.text or len(message.text.strip()) < 2:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", reply_markup=books_menu_kb)
        return
        
    await state.update_data(name=message.text.strip())
    await state.set_state(BookState.author)
    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏:", reply_markup=books_menu_kb)

@admin_router.message(BookState.author) 
async def process_book_author(message: Message, state: FSMContext):
    if not message.text or len(message.text.strip()) < 2:
        await message.answer("‚ùå –ò–º—è –∞–≤—Ç–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", reply_markup=books_menu_kb)
        return
        
    await state.update_data(author=message.text.strip())
    await state.set_state(BookState.price)
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∫–Ω–∏–≥–∏ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")

@admin_router.message(BookState.price)  
async def process_book_price(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("üí∞ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∫–Ω–∏–≥–∏:", reply_markup=books_menu_kb)
        return
    try:
        price = float(message.text.replace(',', '.'))
        if price <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", reply_markup=books_menu_kb)
        return
        
    await state.update_data(price=price)
    await state.set_state(BookState.description)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:", reply_markup=books_menu_kb)

@admin_router.message(BookState.description)    
async def process_book_description(message: Message, state: FSMContext):
    if not message.text or len(message.text.strip()) < 10:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", reply_markup=books_menu_kb)
        return
        
    await state.update_data(description=message.text.strip())
    await state.set_state(BookState.photo)
    await message.answer("üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–Ω–∏–≥–∏:", reply_markup=books_menu_kb)

@admin_router.message(BookState.photo)  
async def process_book_photo(message: Message, state: FSMContext):
    if not message.photo:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–Ω–∏–≥–∏:", reply_markup=books_menu_kb)
        return
        
    await state.update_data(photo=message.photo[-1].file_id)
    await state.set_state(BookState.quantity)
    await message.answer("üì¶ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")

@admin_router.message(BookState.quantity)   
async def process_book_quantity(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("üì¶ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥:", reply_markup=books_menu_kb)
        return
    try:
        quantity = int(message.text)
        if quantity < 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", reply_markup=books_menu_kb)
        return
        
    await state.update_data(quantity=quantity)
    data = await state.get_data()
    
    try:
        book = Books.create(
            name=data["name"],
            author=data["author"],
            price=data["price"],
            description=data["description"],
            photo=data["photo"],
            quantity=data["quantity"]
        )
        await message.answer(
            "‚úÖ –ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!\n\n"
            "üìö –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –∫–Ω–∏–≥—É, –Ω–∞–∂–º–∏—Ç–µ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É'\n"
            "üè† –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start",
            reply_markup=books_menu_kb
        )
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏: {str(e)}", reply_markup=books_menu_kb)
    
    await state.clear()

@admin_router.message(F.text == "üìã –í—Å–µ –∑–∞–∫–∞–∑—ã")
async def view_orders(message: Message):
    orders = Order.select().order_by(Order.id.desc())
    if not orders:
        await message.answer("üì¶ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.", reply_markup=orders_menu_kb)
        return
    
    for order in orders:
        book_info_str = order.book_info if order.book_info else "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–Ω–∏–≥–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        status = order.status
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"change_status_{order.id}"),
             InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"delete_order_{order.id}")]
        ])
        
        await message.answer(
            f"üì¶ *–ó–∞–∫–∞–∑ ‚Ññ{order.id}*\n"
            f"üë§ –§–ò–û: {order.fio}\n"
            f"üè† –ê–¥—Ä–µ—Å: {order.addres}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.phone}\n"
            f"üìö –ö–Ω–∏–≥–∞: {book_info_str}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status.emoji} {status.description}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: {order.updated_at.strftime('%d.%m.%Y %H:%M')}",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
    await message.answer("üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∑–∞–∫–∞–∑–∞–º–∏:", reply_markup=orders_menu_kb)

@admin_router.message(F.text == "üÜï –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã")
async def view_new_orders(message: Message):
    await message.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", reply_markup=orders_menu_kb)

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É
@admin_router.callback_query(F.data.startswith("change_status_"))
async def select_order_for_status_change(callback_query: CallbackQuery):
    if not callback_query.data:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–ª–±—ç–∫–∞.", show_alert=True)
        return

    # –Ø–≤–Ω–æ –ø—Ä–∏–≤–æ–¥–∏–º data –∫ —Å—Ç—Ä–æ–∫–µ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ None
    data_string: str = callback_query.data
    order_id = int(data_string.split("_")[2])
    order = Order.get_or_none(Order.id == order_id)
    
    if not order:
        await callback_query.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    
    statuses = OrderStatus.select()
    status_buttons = []
    for status in statuses:
        status_buttons.append(InlineKeyboardButton(text=f"{status.emoji} {status.description}", callback_data=f"set_status_{status.id}_{order_id}"))
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[status_buttons])
    
    if callback_query.message:
        message_obj = cast(Message, callback_query.message) # –Ø–≤–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —Ç–∏–ø—É Message
        await message_obj.answer(
            f"üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id}: {order.status.emoji} {order.status.description}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:",
            reply_markup=keyboard
        )
    else:
        await callback_query.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:", show_alert=True)
    
    await callback_query.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–ª–±—ç–∫

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
@admin_router.callback_query(F.data.startswith("set_status_"))
async def set_order_status(callback_query: CallbackQuery):
    if not callback_query.data:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–ª–±—ç–∫–∞.", show_alert=True)
        return

    data_string: str = callback_query.data
    parts = data_string.split("_")
    if len(parts) < 3:
        await callback_query.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–ª–±—ç–∫–∞.", show_alert=True)
        return

    new_status_id = int(parts[1])
    order_id = int(parts[2])
    
    order = Order.get_or_none(Order.id == order_id)
    new_status = OrderStatus.get_or_none(id=new_status_id)
    
    if not order or not new_status:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –∏–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
        
    try:
        old_status = order.status
        order.status = new_status
        order.save()
        
        status_message = (
            f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –∏–∑–º–µ–Ω–µ–Ω:\n"
            f"–° {old_status.emoji} {old_status.description}\n"
            f"–ù–∞ {new_status.emoji} {new_status.description}"
        )
        
        if callback_query.message:
            message_obj = cast(Message, callback_query.message) # –Ø–≤–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —Ç–∏–ø—É Message
            await message_obj.answer(status_message)
        else:
            await callback_query.answer(status_message, show_alert=True)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_telegram_id = order.telegram_id
        if callback_query.bot:
            try:
                client_message = (
                    f"üîî *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ ‚Ññ{order.id}*\n\n"
                    f"{new_status.emoji} {new_status.client_message}"
                )
                await callback_query.bot.send_message(
                    user_telegram_id,
                    client_message,
                    parse_mode="Markdown"
                )
                if callback_query.message:
                    message_obj = cast(Message, callback_query.message) # –Ø–≤–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —Ç–∏–ø—É Message
                    await message_obj.answer("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
                else:
                    await callback_query.answer("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", show_alert=True)
            except Exception as e:
                if callback_query.message:
                    message_obj = cast(Message, callback_query.message) # –Ø–≤–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —Ç–∏–ø—É Message
                    await message_obj.answer(
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {user_telegram_id}): {str(e)}"
                    )
                else:
                    await callback_query.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {user_telegram_id}): {str(e)}", show_alert=True)
        else:
            if callback_query.message:
                message_obj = cast(Message, callback_query.message) # –Ø–≤–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —Ç–∏–ø—É Message
                await message_obj.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
            else:
                await callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.", show_alert=True)
            
    except Exception as e:
        if callback_query.message:
            message_obj = cast(Message, callback_query.message) # –Ø–≤–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —Ç–∏–ø—É Message
            await message_obj.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞: {str(e)}")
        else:
            await callback_query.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞: {str(e)}", show_alert=True)
    
    await callback_query.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–ª–±—ç–∫

@admin_router.callback_query(F.data.startswith("edit_book_"))
async def edit_book_callback_handler(callback_query: CallbackQuery, state: FSMContext):
    if not callback_query.data:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–ª–±—ç–∫–∞.", show_alert=True)
        return

    book_id = int(callback_query.data.split("_")[2])
    book = Books.get_or_none(Books.id == book_id)

    if not book:
        await callback_query.answer("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    await state.update_data(book_id=book_id)
    await state.set_state(BookEditState.edit_field)

    edit_options_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_field_name")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ—Ä–∞", callback_data=f"edit_field_author")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_field_description")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"edit_field_price")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data=f"edit_field_quantity")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data=f"edit_field_photo")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_edit_book")]
    ])

    if callback_query.message:
        message_obj = cast(Message, callback_query.message)
        await message_obj.answer(
            f"‚úèÔ∏è –í—ã–±—Ä–∞–Ω–∞ –∫–Ω–∏–≥–∞: *{book.name}*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=edit_options_keyboard
        )
    else:
        await callback_query.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", show_alert=True)

    await callback_query.answer()

@admin_router.callback_query(F.data.startswith("delete_book_"))
async def delete_book_callback_handler(callback_query: CallbackQuery, state: FSMContext):
    if not callback_query.data:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–ª–±—ç–∫–∞.", show_alert=True)
        return

    book_id = int(callback_query.data.split("_")[2])
    book = Books.get_or_none(Books.id == book_id)

    if not book:
        await callback_query.answer("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_book_{book.id}"),
         InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"cancel_delete_book")]
    ])

    if callback_query.message:
        message_obj = cast(Message, callback_query.message)
        await message_obj.answer(
            f"üóë –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É *{book.name}*?",
            reply_markup=confirm_keyboard
        )
    else:
        await callback_query.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏.", show_alert=True)
    
    await callback_query.answer()

@admin_router.callback_query(F.data.startswith("confirm_delete_book_"))
async def confirm_delete_book_callback_handler(callback_query: CallbackQuery):
    if not callback_query.data:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–ª–±—ç–∫–∞.", show_alert=True)
        return

    book_id = int(callback_query.data.split("_")[3])

    try:
        book = Books.get_or_none(Books.id == book_id)
        if not book:
            await callback_query.answer("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return
        
        book_name = book.name
        book.delete_instance()
        
        if callback_query.message:
            message_obj = cast(Message, callback_query.message)
            await message_obj.edit_text(f"‚úÖ –ö–Ω–∏–≥–∞ *{book_name}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
        await callback_query.answer(f"‚úÖ –ö–Ω–∏–≥–∞ {book_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")

    except Exception as e:
        print(f"DEBUG: Error in confirm_delete_book_callback_handler: {e}")
        await callback_query.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏: {str(e)}", show_alert=True)

@admin_router.callback_query(F.data == "cancel_delete_book")
async def cancel_delete_book_callback_handler(callback_query: CallbackQuery):
    if callback_query.message:
        message_obj = cast(Message, callback_query.message)
        await message_obj.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback_query.answer("–£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

@admin_router.callback_query(F.data == "cancel_edit_book")
async def cancel_edit_book_callback_handler(callback_query: CallbackQuery, state: FSMContext):
    await state.clear()
    if callback_query.message:
        message_obj = cast(Message, callback_query.message)
        await message_obj.edit_text("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback_query.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@admin_router.callback_query(F.data.startswith("edit_field_"))
async def choose_edit_field_callback_handler(callback_query: CallbackQuery, state: FSMContext):
    if not callback_query.data:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–ª–±—ç–∫–∞.", show_alert=True)
        return

    field_to_edit = callback_query.data.split("_")[2]
    current_data = await state.get_data()
    book_id = current_data.get("book_id")

    if not book_id:
        await callback_query.answer("‚ùå ID –∫–Ω–∏–≥–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    book = Books.get_or_none(Books.id == book_id)
    if not book:
        await callback_query.answer("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        await state.clear()
        return

    if not callback_query.message:
        await callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏.", show_alert=True)
        return
    
    message_obj = cast(Message, callback_query.message)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –∏ –∑–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    if field_to_edit == "name":
        await state.set_state(BookEditState.new_name)
        await message_obj.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–Ω–∏–≥–∏ *{book.name}*:")
    elif field_to_edit == "author":
        await state.set_state(BookEditState.new_author)
        await message_obj.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ—Ä–∞ –¥–ª—è –∫–Ω–∏–≥–∏ *{book.name}*:")
    elif field_to_edit == "description":
        await state.set_state(BookEditState.new_description)
        await message_obj.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–Ω–∏–≥–∏ *{book.name}*:")
    elif field_to_edit == "price":
        await state.set_state(BookEditState.new_price)
        await message_obj.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è –∫–Ω–∏–≥–∏ *{book.name}* (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
    elif field_to_edit == "quantity":
        await state.set_state(BookEditState.new_quantity)
        await message_obj.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∫–Ω–∏–≥–∏ *{book.name}* (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")
    elif field_to_edit == "photo":
        await state.set_state(BookEditState.new_photo)
        await message_obj.answer(f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –∫–Ω–∏–≥–∏ *{book.name}*:")
    else:
        await callback_query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", show_alert=True)
        return

    await callback_query.answer()

@admin_router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_action(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.", reply_markup=commands)
        return
    
    await state.clear()
    await message.answer(
        "‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=books_menu_kb # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∫–Ω–∏–≥
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥–∏
@admin_router.message(BookEditState.new_name)
async def process_new_book_name(message: Message, state: FSMContext):
    if not message.text or len(message.text.strip()) < 2:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    data = await state.get_data()
    book_id = data.get("book_id")
    book = Books.get_or_none(Books.id == book_id)

    if not book:
        await message.answer("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    try:
        book.name = message.text.strip()
        book.save()
        await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ *{book.name}* —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è: {str(e)}")
    finally:
        await state.clear()

@admin_router.message(BookEditState.new_author)
async def process_new_book_author(message: Message, state: FSMContext):
    if not message.text or len(message.text.strip()) < 2:
        await message.answer("‚ùå –ò–º—è –∞–≤—Ç–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    data = await state.get_data()
    book_id = data.get("book_id")
    book = Books.get_or_none(Books.id == book_id)

    if not book:
        await message.answer("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    try:
        book.author = message.text.strip()
        book.save()
        await message.answer(f"‚úÖ –ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏ *{book.name}* —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ—Ä–∞: {str(e)}")
    finally:
        await state.clear()

@admin_router.message(BookEditState.new_description)
async def process_new_book_description(message: Message, state: FSMContext):
    if not message.text or len(message.text.strip()) < 10:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    data = await state.get_data()
    book_id = data.get("book_id")
    book = Books.get_or_none(Books.id == book_id)

    if not book:
        await message.answer("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    try:
        book.description = message.text.strip()
        book.save()
        await message.answer(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ *{book.name}* —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è: {str(e)}")
    finally:
        await state.clear()

@admin_router.message(BookEditState.new_price)
async def process_new_book_price(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("üí∞ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∫–Ω–∏–≥–∏ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
        return
    try:
        price = float(message.text.replace(',', '.'))
        if price <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    data = await state.get_data()
    book_id = data.get("book_id")
    book = Books.get_or_none(Books.id == book_id)

    if not book:
        await message.answer("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    try:
        book.price = price
        book.save()
        await message.answer(f"‚úÖ –¶–µ–Ω–∞ –∫–Ω–∏–≥–∏ *{book.name}* —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {str(e)}")
    finally:
        await state.clear()

@admin_router.message(BookEditState.new_quantity)
async def process_new_book_quantity(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("üì¶ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")
        return
    try:
        quantity = int(message.text)
        if quantity < 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    data = await state.get_data()
    book_id = data.get("book_id")
    book = Books.get_or_none(Books.id == book_id)

    if not book:
        await message.answer("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    try:
        book.quantity = quantity
        book.save()
        await message.answer(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥ *{book.name}* —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {str(e)}")
    finally:
        await state.clear()

@admin_router.message(BookEditState.new_photo)
async def process_new_book_photo(message: Message, state: FSMContext):
    if not message.photo:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–Ω–∏–≥–∏:")
        return
    
    data = await state.get_data()
    book_id = data.get("book_id")
    book = Books.get_or_none(Books.id == book_id)

    if not book:
        await message.answer("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    try:
        book.photo = message.photo[-1].file_id
        book.save()
        await message.answer(f"‚úÖ –§–æ—Ç–æ –∫–Ω–∏–≥–∏ *{book.name}* —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {str(e)}")
    finally:
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
@admin_router.callback_query(F.data.startswith("delete_order_"))
async def delete_order_callback_handler(callback_query: CallbackQuery):
    if not callback_query.data:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–ª–±—ç–∫–∞.", show_alert=True)
        return

    order_id = int(callback_query.data.split("_")[2])
    order = Order.get_or_none(Order.id == order_id)

    if not order:
        await callback_query.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_order_{order.id}"),
         InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"cancel_delete_order")]
    ])

    if callback_query.message:
        message_obj = cast(Message, callback_query.message)
        await message_obj.answer(
            f"üóëÔ∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ ‚Ññ{order.id}?",
            reply_markup=confirm_keyboard
        )
    else:
        await callback_query.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.", show_alert=True)
    
    await callback_query.answer()

@admin_router.callback_query(F.data.startswith("confirm_delete_order_"))
async def confirm_delete_order_callback_handler(callback_query: CallbackQuery):
    if not callback_query.data:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–ª–±—ç–∫–∞.", show_alert=True)
        return

    order_id = int(callback_query.data.split("_")[3])

    try:
        order = Order.get_or_none(Order.id == order_id)
        if not order:
            await callback_query.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        
        order.delete_instance()
        
        if callback_query.message:
            message_obj = cast(Message, callback_query.message)
            await message_obj.edit_text(f"‚úÖ –ó–∞–∫–∞–∑ ‚Ññ{order_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
        await callback_query.answer(f"‚úÖ –ó–∞–∫–∞–∑ ‚Ññ{order_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")

    except Exception as e:
        print(f"DEBUG: Error in confirm_delete_order_callback_handler: {e}")
        await callback_query.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}", show_alert=True)

@admin_router.callback_query(F.data == "cancel_delete_order")
async def cancel_delete_order_callback_handler(callback_query: CallbackQuery):
    if callback_query.message:
        message_obj = cast(Message, callback_query.message)
        await message_obj.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback_query.answer("–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


