from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from data.models import GalleryText, OrderPretext
from admin.state_book import GalleryTextState, OrderPretextState
from aiogram.fsm.context import FSMContext
from data.models import Admin # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω-–ø—Ä–∞–≤
from config.keyboards import texts_menu_kb # –î–æ–±–∞–≤–∏–ª –∏–º–ø–æ—Ä—Ç texts_menu_kb
from typing import cast # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç cast

admin_texts_router = Router()

async def is_admin_filter(message: Message) -> bool:
    if not message.from_user:
        return False
    return Admin.get_or_none(Admin.user_id == message.from_user.id) is not None

admin_texts_router.message.filter(is_admin_filter)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≥–∞–ª–µ—Ä–µ–∏ ---
@admin_texts_router.message(F.text == "üñº –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –≥–∞–ª–µ—Ä–µ–∏")
async def show_gallery_text_for_edit(message: Message):
    gallery_text_obj = GalleryText.get_or_none()
    current_text = gallery_text_obj.text if gallery_text_obj else "*–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –≥–∞–ª–µ—Ä–µ–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.*"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –≥–∞–ª–µ—Ä–µ–∏", callback_data="edit_gallery_text_inline")]
    ])

    await message.answer(
        f"""*–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –≥–∞–ª–µ—Ä–µ–∏:*
{current_text}""",
        parse_mode="Markdown",
        reply_markup=keyboard
    )

@admin_texts_router.callback_query(F.data == "edit_gallery_text_inline")
async def edit_gallery_text_inline(callback_query: CallbackQuery, state: FSMContext):
    await state.set_state(GalleryTextState.text)
    if callback_query.message:
        message_obj = cast(Message, callback_query.message) # –Ø–≤–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —Ç–∏–ø—É Message
        await message_obj.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏:")
    await callback_query.answer()

@admin_texts_router.message(GalleryTextState.text)
async def process_gallery_text(message: Message, state: FSMContext):
    if not message.text or len(message.text.strip()) < 5:
        await message.answer("–¢–µ–∫—Å—Ç –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", reply_markup=texts_menu_kb)
        return
    
    try:
        gallery_text_obj = GalleryText.get_or_none()
        if gallery_text_obj:
            gallery_text_obj.text = message.text.strip()
            gallery_text_obj.save()
            status = "–æ–±–Ω–æ–≤–ª–µ–Ω"
        else:
            GalleryText.create(text=message.text.strip())
            status = "—Å–æ–∑–¥–∞–Ω"
        await message.answer(f"–¢–µ–∫—Å—Ç –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏ —É—Å–ø–µ—à–Ω–æ {status}!", reply_markup=texts_menu_kb)
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≥–∞–ª–µ—Ä–µ–∏: {str(e)}", reply_markup=texts_menu_kb)
    finally:
        await state.clear()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–∫–∞–∑–∞ ---
@admin_texts_router.message(F.text == "üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞")
async def show_order_pretext_for_edit(message: Message):
    order_pretext_obj = OrderPretext.get_or_none()
    current_text = order_pretext_obj.text if order_pretext_obj else "*–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –∑–∞–∫–∞–∑–æ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.*"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞", callback_data="edit_order_pretext_inline")]
    ])

    await message.answer(
        f"""*–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –∑–∞–∫–∞–∑–æ–º:*
{current_text}""",
        parse_mode="Markdown",
        reply_markup=keyboard
    )

@admin_texts_router.callback_query(F.data == "edit_order_pretext_inline")
async def edit_order_pretext_inline(callback_query: CallbackQuery, state: FSMContext):
    await state.set_state(OrderPretextState.text)
    if callback_query.message:
        message_obj = cast(Message, callback_query.message) # –Ø–≤–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —Ç–∏–ø—É Message
        await message_obj.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –∑–∞–∫–∞–∑–æ–º:")
    await callback_query.answer()

@admin_texts_router.message(OrderPretextState.text)
async def process_order_pretext(message: Message, state: FSMContext):
    if not message.text or len(message.text.strip()) < 5:
        await message.answer("–¢–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –∑–∞–∫–∞–∑–æ–º –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", reply_markup=texts_menu_kb)
        return
    
    try:
        order_pretext_obj = OrderPretext.get_or_none()
        if order_pretext_obj:
            order_pretext_obj.text = message.text.strip()
            order_pretext_obj.save()
            status = "–æ–±–Ω–æ–≤–ª–µ–Ω"
        else:
            OrderPretext.create(text=message.text.strip())
            status = "—Å–æ–∑–¥–∞–Ω"
        await message.answer(f"–¢–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –∑–∞–∫–∞–∑–æ–º —É—Å–ø–µ—à–Ω–æ {status}!", reply_markup=texts_menu_kb)
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫–∞–∑–æ–º: {str(e)}", reply_markup=texts_menu_kb)
    finally:
        await state.clear() 