import sys
import os

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from aiogram.types import Message, Contact, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from data.models import db
from data.models import Admin
from aiogram import Router, F
from config.keyboards import admins_menu_kb
from aiogram.fsm.context import FSMContext
from admin.state_book import AdminEditState
from typing import cast

register_admin_router = Router()

async def is_admin_filter(message: Message) -> bool:
    if not message.from_user:
        return False
    return Admin.get_or_none(Admin.user_id == message.from_user.id) is not None

# register_admin_router.message.filter(is_admin_filter) # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

@register_admin_router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def add_admin_start(message: Message):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.\n"
        "–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º' –≤ –º–µ–Ω—é –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.",
        reply_markup=admins_menu_kb
    )

@register_admin_router.message(F.contact)
async def add_admin_contact(message: Message):
    try:
        contact = message.contact
        if contact is None:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", reply_markup=admins_menu_kb)
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        print(f"DEBUG: Received contact.user_id: {contact.user_id}")
        print(f"DEBUG: Received contact.first_name: {contact.first_name}")
        print(f"DEBUG: Received contact.phone_number: {contact.phone_number}")

        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin, created = Admin.get_or_create(user_id=contact.user_id)
        admin.user_name = contact.first_name + (f" {contact.last_name}" if contact.last_name else "")
        # –ò–∑–º–µ–Ω–µ–Ω–æ: —Å–æ—Ö—Ä–∞–Ω—è–µ–º phone_number –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –±–µ–∑ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ int
        admin.phone = contact.phone_number if contact.phone_number else "" 
        admin.save()
        status = "–æ–±–Ω–æ–≤–ª–µ–Ω" if not created else "–¥–æ–±–∞–≤–ª–µ–Ω"
        await message.answer(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ {status}!", reply_markup=admins_menu_kb)
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {str(e)}", reply_markup=admins_menu_kb)

async def list_admins(message: Message):
    admins = Admin.select()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã
    print(f"DEBUG: Admins retrieved from DB: {[(admin.user_id, admin.user_name, admin.phone) for admin in admins]}") # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    if not admins:
        await message.answer("–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç", reply_markup=admins_menu_kb)
        return
    
    await message.answer("–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:") # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–¥–∏–Ω —Ä–∞–∑
    for admin in admins:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data=f"edit_admin_{admin.user_id}"),
             InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data=f"delete_admin_{admin.user_id}")]
        ])
        await message.answer(
            f"ID: `{admin.user_id}`\n" # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –¥–ª—è –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ ID
            f"–ò–º—è: *{admin.user_name}*\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: `{admin.phone}`", # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –¥–ª—è –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            parse_mode="Markdown",
            reply_markup=keyboard
        )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admins_menu_kb)

@register_admin_router.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def delete_admin(message: Message):
    admins = Admin.select()
    if not admins:
        await message.answer("–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç", reply_markup=admins_menu_kb)
        return
    
    response = "–í—ã–±–µ—Ä–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
    for admin in admins:
        response += f"ID: {admin.user_id} - {admin.user_name}\n"
    await message.answer(response, reply_markup=admins_menu_kb)

@register_admin_router.message(lambda message: message.text is not None and message.text.isdigit() and Admin.get_or_none(Admin.user_id == int(message.text)))
async def delete_admin_by_id(message: Message):
    try:
        if message.text is None: return # –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ–º –ª–∏–Ω—Ç–µ—Ä
        user_id = int(message.text) # message.text –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –Ω–µ None –±–ª–∞–≥–æ–¥–∞—Ä—è –ª—è–º–±–¥–µ
        admin = Admin.get(Admin.user_id == user_id)
        admin.delete_instance()
        await message.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", reply_markup=admins_menu_kb)
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {str(e)}", reply_markup=admins_menu_kb)

@register_admin_router.message(F.text == "–û–±–Ω–æ–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def update_admin_start(message: Message):
    admins = Admin.select()
    if not admins:
        await message.answer("–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç", reply_markup=admins_menu_kb)
        return
    
    response = "–í—ã–±–µ—Ä–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n\n"
    for admin in admins:
        response += f"ID: {admin.user_id} - {admin.user_name}\n"
    await message.answer(response, reply_markup=admins_menu_kb)

@register_admin_router.message(lambda message: message.text is not None and message.text.isdigit() and Admin.get_or_none(Admin.user_id == int(message.text)))
async def update_admin_contact(message: Message):
    try:
        if message.text is None: return # –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ–º –ª–∏–Ω—Ç–µ—Ä
        user_id = int(message.text) # message.text –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –Ω–µ None –±–ª–∞–≥–æ–¥–∞—Ä—è –ª—è–º–±–¥–µ
        admin = Admin.get_or_none(Admin.user_id == user_id)
        if not admin:
            await message.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", reply_markup=admins_menu_kb)
            return
        await message.answer(
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin.user_name}.\n"
            "–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º' –≤ –º–µ–Ω—é –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.",
            reply_markup=admins_menu_kb
        )
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {str(e)}", reply_markup=admins_menu_kb)

@register_admin_router.message(F.contact)
async def update_admin_by_contact(message: Message):
    try:
        contact = message.contact
        if contact is None:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", reply_markup=admins_menu_kb)
            return
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin, created = Admin.get_or_create(user_id=contact.user_id)
        admin.user_name = contact.first_name + (f" {contact.last_name}" if contact.last_name else "")
        admin.phone = int(contact.phone_number.replace("+", ""))
        admin.save()
        status = "–æ–±–Ω–æ–≤–ª–µ–Ω—ã" if not created else "–¥–æ–±–∞–≤–ª–µ–Ω—ã"
        await message.answer(f"–î–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ {status}!", reply_markup=admins_menu_kb)
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {str(e)}", reply_markup=admins_menu_kb)

@register_admin_router.message(F.text == "üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
async def show_list_admins(message: Message):
    user_id = message.from_user.id if message.from_user else "Unknown"
    print(f"DEBUG: show_list_admins called for user ID: {user_id}")
    await list_admins(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@register_admin_router.callback_query(F.data.regexp(r"^edit_admin_\d+$"))
async def edit_admin_callback_handler(callback_query: CallbackQuery, state: FSMContext):
    if not callback_query.data:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–ª–±—ç–∫–∞.", show_alert=True)
        return

    print(f"DEBUG: callback_query.data: {callback_query.data}") # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    admin_user_id = int(callback_query.data.split("_")[2])
    print(f"DEBUG: Extracted admin_user_id: {admin_user_id}") # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    admin = Admin.get_or_none(Admin.user_id == admin_user_id)
    print(f"DEBUG: Admin found: {admin is not None}") # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

    if not admin:
        await callback_query.answer("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    await state.update_data(user_id=admin_user_id)
    await state.set_state(AdminEditState.edit_field)

    edit_options_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data=f"edit_admin_field_user_name")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data=f"edit_admin_field_phone")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_edit_admin")]
    ])

    if callback_query.message:
        message_obj = cast(Message, callback_query.message)
        await message_obj.answer(
            f"‚úèÔ∏è –í—ã–±—Ä–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: *{admin.user_name}* (ID: `{admin.user_id}`)\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            parse_mode="Markdown",
            reply_markup=edit_options_keyboard
        )
    else:
        await callback_query.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", show_alert=True)

    await callback_query.answer()

@register_admin_router.callback_query(F.data == "cancel_edit_admin")
async def cancel_edit_admin_callback_handler(callback_query: CallbackQuery, state: FSMContext):
    await state.clear()
    if callback_query.message:
        message_obj = cast(Message, callback_query.message)
        await message_obj.edit_text("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback_query.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@register_admin_router.callback_query(F.data.startswith("delete_admin_"))
async def delete_admin_callback_handler(callback_query: CallbackQuery):
    if not callback_query.data:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–ª–±—ç–∫–∞.", show_alert=True)
        return

    admin_user_id = int(callback_query.data.split("_")[2])
    admin = Admin.get_or_none(Admin.user_id == admin_user_id)

    if not admin:
        await callback_query.answer("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_admin_{admin.user_id}"),
         InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"cancel_delete_admin")]
    ])

    if callback_query.message:
        message_obj = cast(Message, callback_query.message)
        await message_obj.answer(
            f"üóëÔ∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ *{admin.user_name}* (ID: `{admin.user_id}`)?",
            parse_mode="Markdown",
            reply_markup=confirm_keyboard
        )
    else:
        await callback_query.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
    
    await callback_query.answer()

@register_admin_router.callback_query(F.data.startswith("confirm_delete_admin_"))
async def confirm_delete_admin_callback_handler(callback_query: CallbackQuery):
    if not callback_query.data:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–ª–±—ç–∫–∞.", show_alert=True)
        return

    admin_user_id = int(callback_query.data.split("_")[3])

    try:
        admin = Admin.get_or_none(Admin.user_id == admin_user_id)
        if not admin:
            await callback_query.answer("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        
        admin_name = admin.user_name
        admin.delete_instance()
        
        if callback_query.message:
            message_obj = cast(Message, callback_query.message)
            await message_obj.edit_text(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä *{admin_name}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", parse_mode="Markdown")
        await callback_query.answer(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")

    except Exception as e:
        print(f"DEBUG: Error in confirm_delete_admin_callback_handler: {e}")
        await callback_query.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {str(e)}", show_alert=True)

@register_admin_router.callback_query(F.data == "cancel_delete_admin")
async def cancel_delete_admin_callback_handler(callback_query: CallbackQuery):
    if callback_query.message:
        message_obj = cast(Message, callback_query.message)
        await message_obj.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback_query.answer("–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@register_admin_router.callback_query(AdminEditState.edit_field, F.data.startswith("edit_admin_field_"))
async def choose_admin_edit_field_callback_handler(callback_query: CallbackQuery, state: FSMContext):
    print(f"DEBUG: choose_admin_edit_field_callback_handler called. callback_query.data: {callback_query.data}")

    if not callback_query.data:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–ª–±—ç–∫–∞.", show_alert=True)
        return

    field_to_edit = callback_query.data.split("_")[3]
    print(f"DEBUG: field_to_edit: {field_to_edit}")

    current_data = await state.get_data()
    admin_user_id = current_data.get("user_id")

    if not admin_user_id:
        await callback_query.answer("‚ùå ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        print("DEBUG: admin_user_id not found in state.")
        return

    admin = Admin.get_or_none(Admin.user_id == admin_user_id)
    if not admin:
        await callback_query.answer("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        await state.clear()
        print("DEBUG: Admin not found in DB.")
        return

    if not callback_query.message:
        await callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏.", show_alert=True)
        print("DEBUG: callback_query.message is None.")
        return
    
    message_obj = cast(Message, callback_query.message)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –∏ –∑–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    if field_to_edit == "user_name":
        await state.set_state(AdminEditState.new_user_name)
        await message_obj.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ *{admin.user_name}*:", parse_mode="Markdown")
        print(f"DEBUG: State set to new_user_name for {admin.user_name}")
    elif field_to_edit == "phone":
        await state.set_state(AdminEditState.new_phone)
        await message_obj.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ *{admin.user_name}* (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):", parse_mode="Markdown")
        print(f"DEBUG: State set to new_phone for {admin.user_name}")
    else:
        await callback_query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", show_alert=True)
        print(f"DEBUG: Unknown field to edit: {field_to_edit}")
        return

    await callback_query.answer()

@register_admin_router.message(AdminEditState.new_user_name)
async def process_new_admin_user_name(message: Message, state: FSMContext):
    if not message.text or len(message.text.strip()) < 2:
        await message.answer("‚ùå –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    data = await state.get_data()
    admin_user_id = data.get("user_id")
    admin = Admin.get_or_none(Admin.user_id == admin_user_id)

    if not admin:
        await message.answer("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    try:
        admin.user_name = message.text.strip()
        admin.save()
        await message.answer(f"‚úÖ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ *{admin.user_name}* —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", parse_mode="Markdown")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
    finally:
        await state.clear()

@register_admin_router.message(AdminEditState.new_phone)
async def process_new_admin_phone(message: Message, state: FSMContext):
    if not message.text: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π
        await message.answer("‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ isdigit() –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ int
    new_phone_number = message.text.strip()

    data = await state.get_data()
    admin_user_id = data.get("user_id")
    admin = Admin.get_or_none(Admin.user_id == admin_user_id)

    if not admin:
        await message.answer("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    try:
        admin.phone = new_phone_number
        admin.save()
        await message.answer(f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ *{admin.user_name}* —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!", parse_mode="Markdown")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {str(e)}")
    finally:
        await state.clear()

