import sys
import os
from config.logger_config import setup_logger, log_debug, log_error, log_info, log_warning

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from aiogram.types import Message, Contact, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from data.models import db
from data.models import Admin
from aiogram import Router, F
from config.keyboards import admins_menu_kb
from aiogram.fsm.context import FSMContext
from admin.state_book import AdminEditState
from typing import cast

register_admin_router = Router()
logger = setup_logger('admin_rigister_admin')

async def is_admin_filter(message: Message) -> bool:
    if not message.from_user:
        log_debug(logger, "is_admin_filter: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.", {})
        return False
    
    user_id = message.from_user.id
    is_admin = Admin.get_or_none(Admin.user_id == user_id) is not None
    log_debug(logger, f"is_admin_filter: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –†–µ–∑—É–ª—å—Ç–∞—Ç: {is_admin}", {"user_id": user_id, "is_admin": is_admin})
    return is_admin

register_admin_router.message.filter(is_admin_filter) # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ

@register_admin_router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def add_admin_start(message: Message):
    log_debug(logger, "–í—Ö–æ–¥ –≤ add_admin_start", {"user_id": message.from_user.id if message.from_user else None})
    try:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.\n"
            "–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º' –≤ –º–µ–Ω—é –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.",
            reply_markup=admins_menu_kb
        )
    except Exception as e:
        log_error(logger, e, "–û—à–∏–±–∫–∞ –≤ add_admin_start")

@register_admin_router.message(F.contact)
async def add_admin_contact(message: Message):
    try:
        contact = message.contact
        if contact is None:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", reply_markup=admins_menu_kb)
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        print(f"DEBUG: Received contact.user_id: {contact.user_id}")
        print(f"DEBUG: Received contact.first_name: {contact.first_name}")
        print(f"DEBUG: Received contact.phone_number: {contact.phone_number}")

        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin, created = Admin.get_or_create(user_id=contact.user_id)
        admin.user_name = contact.first_name + (f" {contact.last_name}" if contact.last_name else "")
        # –ò–∑–º–µ–Ω–µ–Ω–æ: —Å–æ—Ö—Ä–∞–Ω—è–µ–º phone_number –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –±–µ–∑ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ int
        admin.phone = contact.phone_number if contact.phone_number else "" 
        admin.save()
        status = "–æ–±–Ω–æ–≤–ª–µ–Ω" if not created else "–¥–æ–±–∞–≤–ª–µ–Ω"
        await message.answer(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ {status}!", reply_markup=admins_menu_kb)
    except Exception as e:
        log_error(logger, e, "–û—à–∏–±–∫–∞ –≤ add_admin_contact")

async def list_admins(message: Message):
    log_debug(logger, "–ù–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ list_admins")
    admins = Admin.select()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã
    if not admins:
        log_info(logger, "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç")
        await message.answer("–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç", reply_markup=admins_menu_kb)
        return
    
    log_info(logger, f"–ù–∞–π–¥–µ–Ω–æ {len(admins)} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞.")
    await message.answer("–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:") # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–¥–∏–Ω —Ä–∞–∑
    for admin in admins:
        log_debug(logger, f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ: {admin.user_id}", {"admin_id": admin.user_id, "user_name": admin.user_name})
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data=f"edit_admin_{admin.user_id}"),
             InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data=f"delete_admin_{admin.user_id}")]
        ])
        await message.answer(
            f"ID: `{admin.user_id}`\n" # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –¥–ª—è –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ ID
            f"–ò–º—è: *{admin.user_name}*\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: `{admin.phone}`", # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –¥–ª—è –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            parse_mode="Markdown",
            reply_markup=keyboard
        )
    log_debug(logger, "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ list_admins")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admins_menu_kb)

@register_admin_router.message(F.text == "üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
async def show_list_admins(message: Message):
    user_id = message.from_user.id if message.from_user else "Unknown"
    log_debug(logger, "–í—Ö–æ–¥ –≤ show_list_admins", {"user_id": user_id})
    await list_admins(message)
    log_debug(logger, "–í—ã—Ö–æ–¥ –∏–∑ show_list_admins", {"user_id": user_id})

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@register_admin_router.callback_query(F.data.regexp(r"^edit_admin_\\d+$"))
async def edit_admin_callback_handler(callback_query: CallbackQuery, state: FSMContext):
    log_debug(logger, "–í—Ö–æ–¥ –≤ edit_admin_callback_handler", {"user_id": callback_query.from_user.id if callback_query.from_user else None, "callback_data": callback_query.data})
    if not callback_query.data:
        log_warning(logger, "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–ª–±—ç–∫–∞ –≤ edit_admin_callback_handler", {"user_id": callback_query.from_user.id if callback_query.from_user else None})
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–ª–±—ç–∫–∞.", show_alert=True)
        return

    try:
        admin_user_id = int(callback_query.data.split("_")[2])
        log_debug(logger, f"–ò–∑–≤–ª–µ—á–µ–Ω admin_user_id: {admin_user_id}")
    except (ValueError, IndexError) as e:
        log_error(logger, e, f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è edit_admin: {callback_query.data}")
        await callback_query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return

    admin = Admin.get_or_none(Admin.user_id == admin_user_id)

    if not admin:
        log_warning(logger, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", {"admin_user_id": admin_user_id})
        await callback_query.answer("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    await state.update_data(user_id=admin_user_id) # Store admin_user_id in FSM
    await state.set_state(AdminEditState.edit_field)
    log_info(logger, "–°–æ—Å—Ç–æ—è–Ω–∏–µ FSM —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ AdminEditState.edit_field", {"admin_user_id": admin_user_id, "user_id": callback_query.from_user.id if callback_query.from_user else None})

    edit_options_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data=f"edit_admin_field_user_name")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data=f"edit_admin_field_phone")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", callback_data=f"edit_admin_field_role")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è", callback_data=f"edit_admin_field_display_name")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_edit_admin")]
    ])

    if callback_query.message:
        message_obj = cast(Message, callback_query.message)
        log_debug(logger, "–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        await message_obj.answer(
            f"‚úèÔ∏è –í—ã–±—Ä–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: *{admin.user_name}* (ID: `{admin.user_id}`)\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            parse_mode="Markdown",
            reply_markup=edit_options_keyboard
        )
    else:
        log_warning(logger, "callback_query.message is None –≤ edit_admin_callback_handler")
        await callback_query.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", show_alert=True)

    await callback_query.answer()
    log_debug(logger, "–í—ã—Ö–æ–¥ –∏–∑ edit_admin_callback_handler")

@register_admin_router.callback_query(F.data == "cancel_edit_admin")
async def cancel_edit_admin_callback_handler(callback_query: CallbackQuery, state: FSMContext):
    log_debug(logger, "–í—Ö–æ–¥ –≤ cancel_edit_admin_callback_handler", {"user_id": callback_query.from_user.id if callback_query.from_user else None})
    await state.clear()
    if callback_query.message:
        message_obj = cast(Message, callback_query.message)
        await message_obj.edit_text("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback_query.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    log_debug(logger, "–í—ã—Ö–æ–¥ –∏–∑ cancel_edit_admin_callback_handler")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@register_admin_router.callback_query(F.data.startswith("delete_admin_"))
async def delete_admin_callback_handler(callback_query: CallbackQuery):
    log_debug(logger, "–í—Ö–æ–¥ –≤ delete_admin_callback_handler", {"user_id": callback_query.from_user.id if callback_query.from_user else None, "callback_data": callback_query.data})
    if not callback_query.data:
        log_warning(logger, "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–ª–±—ç–∫–∞ –≤ delete_admin_callback_handler", {"user_id": callback_query.from_user.id if callback_query.from_user else None})
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–ª–±—ç–∫–∞.", show_alert=True)
        return

    try:
        admin_user_id = int(callback_query.data.split("_")[2])
        log_debug(logger, f"–ò–∑–≤–ª–µ—á–µ–Ω admin_user_id –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {admin_user_id}")
    except (ValueError, IndexError) as e:
        log_error(logger, e, f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è delete_admin: {callback_query.data}")
        await callback_query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return

    admin = Admin.get_or_none(Admin.user_id == admin_user_id)

    if not admin:
        log_warning(logger, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", {"admin_user_id": admin_user_id})
        await callback_query.answer("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_admin_{admin.user_id}"),
         InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"cancel_delete_admin")]
    ])

    if callback_query.message:
        message_obj = cast(Message, callback_query.message)
        log_debug(logger, "–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        await message_obj.answer(
            f"üóëÔ∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ *{admin.user_name}* (ID: `{admin.user_id}`)?",
            parse_mode="Markdown",
            reply_markup=confirm_keyboard
        )
    else:
        log_warning(logger, "callback_query.message is None –≤ delete_admin_callback_handler")
        await callback_query.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
    
    await callback_query.answer()
    log_debug(logger, "–í—ã—Ö–æ–¥ –∏–∑ delete_admin_callback_handler")

@register_admin_router.callback_query(F.data.startswith("confirm_delete_admin_"))
async def confirm_delete_admin_callback_handler(callback_query: CallbackQuery):
    log_debug(logger, "–í—Ö–æ–¥ –≤ confirm_delete_admin_callback_handler", {"user_id": callback_query.from_user.id if callback_query.from_user else None, "callback_data": callback_query.data})
    if not callback_query.data:
        log_warning(logger, "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–ª–±—ç–∫–∞ –≤ confirm_delete_admin_callback_handler", {"user_id": callback_query.from_user.id if callback_query.from_user else None})
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–ª–±—ç–∫–∞.", show_alert=True)
        return

    try:
        admin_user_id = int(callback_query.data.split("_")[3])
        log_debug(logger, f"–ò–∑–≤–ª–µ—á–µ–Ω admin_user_id –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è: {admin_user_id}")
    except (ValueError, IndexError) as e:
        log_error(logger, e, f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è confirm_delete_admin: {callback_query.data}")
        await callback_query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return

    try:
        admin = Admin.get_or_none(Admin.user_id == admin_user_id)
        if not admin:
            log_warning(logger, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è", {"admin_user_id": admin_user_id})
            await callback_query.answer("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        
        admin_name = admin.user_name
        admin.delete_instance()
        log_info(logger, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω", {"admin_user_id": admin_user_id, "admin_name": admin_name})
        
        if callback_query.message:
            message_obj = cast(Message, callback_query.message)
            log_debug(logger, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            await message_obj.edit_text(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä *{admin_name}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", parse_mode="Markdown")
        await callback_query.answer(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")

    except Exception as e:
        log_error(logger, e, "–û—à–∏–±–∫–∞ –≤ confirm_delete_admin_callback_handler")
        await callback_query.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {str(e)}", show_alert=True)
    log_debug(logger, "–í—ã—Ö–æ–¥ –∏–∑ confirm_delete_admin_callback_handler")

@register_admin_router.callback_query(F.data == "cancel_delete_admin")
async def cancel_delete_admin_callback_handler(callback_query: CallbackQuery):
    log_debug(logger, "–í—Ö–æ–¥ –≤ cancel_delete_admin_callback_handler", {"user_id": callback_query.from_user.id if callback_query.from_user else None})
    if callback_query.message:
        message_obj = cast(Message, callback_query.message)
        await message_obj.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback_query.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    log_debug(logger, "–í—ã—Ö–æ–¥ –∏–∑ cancel_delete_admin_callback_handler")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@register_admin_router.callback_query(AdminEditState.edit_field, F.data.startswith("edit_admin_field_"))
async def choose_admin_edit_field_callback_handler(callback_query: CallbackQuery, state: FSMContext):
    log_debug(logger, "–í—Ö–æ–¥ –≤ choose_admin_edit_field_callback_handler", {"user_id": callback_query.from_user.id if callback_query.from_user else None, "callback_data": callback_query.data})
    if not callback_query.data:
        log_warning(logger, "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–ª–±—ç–∫–∞ –≤ choose_admin_edit_field_callback_handler", {"user_id": callback_query.from_user.id if callback_query.from_user else None})
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–ª–±—ç–∫–∞.", show_alert=True)
        return

    field_to_edit = callback_query.data.split("_")[3]
    log_debug(logger, f"–ü–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {field_to_edit}")

    current_data = await state.get_data()
    admin_user_id = current_data.get("user_id")
    log_debug(logger, f"admin_user_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {admin_user_id}")

    if not admin_user_id:
        log_error(logger, ValueError("ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏."), "admin_user_id is None in state")
        await callback_query.answer("‚ùå ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    admin = Admin.get_or_none(Admin.user_id == admin_user_id)
    if not admin:
        log_warning(logger, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", {"admin_user_id": admin_user_id})
        await callback_query.answer("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        await state.clear()
        return

    if not callback_query.message:
        log_warning(logger, "callback_query.message is None –≤ choose_admin_edit_field_callback_handler")
        await callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏.", show_alert=True)
        return
    
    message_obj = cast(Message, callback_query.message)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –∏ –∑–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    if field_to_edit == "user_name":
        await state.set_state(AdminEditState.new_user_name)
        log_info(logger, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è new_user_name", {"admin_user_id": admin_user_id})
        await message_obj.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ *{admin.user_name}*:", parse_mode="Markdown")
    elif field_to_edit == "phone":
        await state.set_state(AdminEditState.new_phone)
        log_info(logger, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è new_phone", {"admin_user_id": admin_user_id})
        await message_obj.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ *{admin.user_name}* (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):", parse_mode="Markdown")
    elif field_to_edit == "role":
        await state.set_state(AdminEditState.new_role)
        log_info(logger, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è new_role", {"admin_user_id": admin_user_id})
        await message_obj.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ *{admin.user_name}* (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'admin', 'manager', 'tech_support'):", parse_mode="Markdown")
    elif field_to_edit == "display_name":
        await state.set_state(AdminEditState.new_display_name)
        log_info(logger, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è new_display_name", {"admin_user_id": admin_user_id})
        await message_obj.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ *{admin.user_name}* (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ò–≤–∞–Ω (–ú–µ–Ω–µ–¥–∂–µ—Ä)'):", parse_mode="Markdown")
    else:
        log_warning(logger, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {field_to_edit}", {"field": field_to_edit, "user_id": callback_query.from_user.id if callback_query.from_user else None})
        await callback_query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", show_alert=True)
        return

    await callback_query.answer()
    log_debug(logger, "–í—ã—Ö–æ–¥ –∏–∑ choose_admin_edit_field_callback_handler")

@register_admin_router.message(AdminEditState.new_user_name)
async def process_new_admin_user_name(message: Message, state: FSMContext):
    log_debug(logger, "–í—Ö–æ–¥ –≤ process_new_admin_user_name", {"user_id": message.from_user.id if message.from_user else None, "message_text": message.text[:50] if message.text else ""})
    if not message.text or len(message.text.strip()) < 2:
        log_warning(logger, "–ù–æ–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ", {"user_id": message.from_user.id if message.from_user else None, "text_len": len(message.text.strip()) if message.text else 0})
        await message.answer("‚ùå –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", parse_mode="Markdown")
        return
    
    current_data = await state.get_data()
    admin_user_id = current_data.get("user_id")
    
    if not admin_user_id:
        log_error(logger, ValueError("ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."), "admin_user_id is None in state for user_name update")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.clear()
        return
    
    try:
        admin = Admin.get_or_none(Admin.user_id == admin_user_id)
        if admin:
            old_name = admin.user_name
            admin.user_name = message.text.strip()
            admin.save()
            log_info(logger, "–ò–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ", {"admin_user_id": admin_user_id, "old_name": old_name, "new_name": admin.user_name})
            await message.answer(f"‚úÖ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è *{old_name}* —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ *{admin.user_name}*!", parse_mode="Markdown", reply_markup=admins_menu_kb)
        else:
            log_warning(logger, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", {"admin_user_id": admin_user_id})
            await message.answer("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=admins_menu_kb)
    except Exception as e:
        log_error(logger, e, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}", reply_markup=admins_menu_kb)
    finally:
        await state.clear()
    log_debug(logger, "–í—ã—Ö–æ–¥ –∏–∑ process_new_admin_user_name")

@register_admin_router.message(AdminEditState.new_phone)
async def process_new_admin_phone(message: Message, state: FSMContext):
    log_debug(logger, "–í—Ö–æ–¥ –≤ process_new_admin_phone", {"user_id": message.from_user.id if message.from_user else None, "message_text": message.text[:50] if message.text else ""})
    if not message.text or not message.text.strip().isdigit() or len(message.text.strip()) < 5:
        log_warning(logger, "–ù–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω", {"user_id": message.from_user.id if message.from_user else None, "phone_text": message.text[:50] if message.text else ""})
        await message.answer("‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 5 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", parse_mode="Markdown")
        return
    
    current_data = await state.get_data()
    admin_user_id = current_data.get("user_id")

    if not admin_user_id:
        log_error(logger, ValueError("ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞."), "admin_user_id is None in state for phone update")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.clear()
        return
    
    try:
        admin = Admin.get_or_none(Admin.user_id == admin_user_id)
        if admin:
            old_phone = admin.phone
            admin.phone = message.text.strip()
            admin.save()
            log_info(logger, "–¢–µ–ª–µ—Ñ–æ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω", {"admin_user_id": admin_user_id, "old_phone": old_phone, "new_phone": admin.phone})
            await message.answer(f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è *{admin.user_name}* —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ *{admin.phone}*!", parse_mode="Markdown", reply_markup=admins_menu_kb)
        else:
            log_warning(logger, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞", {"admin_user_id": admin_user_id})
            await message.answer("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=admins_menu_kb)
    except Exception as e:
        log_error(logger, e, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {str(e)}", reply_markup=admins_menu_kb)
    finally:
        await state.clear()
    log_debug(logger, "–í—ã—Ö–æ–¥ –∏–∑ process_new_admin_phone")

@register_admin_router.message(AdminEditState.new_role)
async def process_new_admin_role(message: Message, state: FSMContext):
    log_debug(logger, "–í—Ö–æ–¥ –≤ process_new_admin_role", {"user_id": message.from_user.id if message.from_user else None, "message_text": message.text[:50] if message.text else ""})
    if not message.text or len(message.text.strip()) < 2:
        log_warning(logger, "–ù–æ–≤–∞—è —Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è", {"user_id": message.from_user.id if message.from_user else None, "text_len": len(message.text.strip()) if message.text else 0})
        await message.answer("‚ùå –†–æ–ª—å –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", parse_mode="Markdown")
        return

    current_data = await state.get_data()
    admin_user_id = current_data.get("user_id")

    if not admin_user_id:
        log_error(logger, ValueError("ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏."), "admin_user_id is None in state for role update")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.clear()
        return

    try:
        admin = Admin.get_or_none(Admin.user_id == admin_user_id)
        if admin:
            old_role = admin.role
            admin.role = message.text.strip()
            admin.save()
            log_info(logger, "–†–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞", {"admin_user_id": admin_user_id, "old_role": old_role, "new_role": admin.role})
            await message.answer(f"‚úÖ –†–æ–ª—å –¥–ª—è *{admin.user_name}* —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ *{admin.role}*!", parse_mode="Markdown", reply_markup=admins_menu_kb)
        else:
            log_warning(logger, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏", {"admin_user_id": admin_user_id})
            await message.answer("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=admins_menu_kb)
    except Exception as e:
        log_error(logger, e, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏: {str(e)}", reply_markup=admins_menu_kb)
    finally:
        await state.clear()
    log_debug(logger, "–í—ã—Ö–æ–¥ –∏–∑ process_new_admin_role")

@register_admin_router.message(AdminEditState.new_display_name)
async def process_new_admin_display_name(message: Message, state: FSMContext):
    log_debug(logger, "–í—Ö–æ–¥ –≤ process_new_admin_display_name", {"user_id": message.from_user.id if message.from_user else None, "message_text": message.text[:50] if message.text else ""})
    if not message.text or len(message.text.strip()) < 2:
        log_warning(logger, "–ù–æ–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ", {"user_id": message.from_user.id if message.from_user else None, "text_len": len(message.text.strip()) if message.text else 0})
        await message.answer("‚ùå –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", parse_mode="Markdown")
        return

    current_data = await state.get_data()
    admin_user_id = current_data.get("user_id")

    if not admin_user_id:
        log_error(logger, ValueError("ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏."), "admin_user_id is None in state for display_name update")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.clear()
        return

    try:
        admin = Admin.get_or_none(Admin.user_id == admin_user_id)
        if admin:
            old_display_name = admin.display_name
            admin.display_name = message.text.strip()
            admin.save()
            log_info(logger, "–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ", {"admin_user_id": admin_user_id, "old_display_name": old_display_name, "new_display_name": admin.display_name})
            await message.answer(f"‚úÖ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –¥–ª—è *{admin.user_name}* —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ *{admin.display_name}*!", parse_mode="Markdown", reply_markup=admins_menu_kb)
        else:
            log_warning(logger, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏", {"admin_user_id": admin_user_id})
            await message.answer("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=admins_menu_kb)
    except Exception as e:
        log_error(logger, e, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏: {str(e)}", reply_markup=admins_menu_kb)
    finally:
        await state.clear()
    log_debug(logger, "–í—ã—Ö–æ–¥ –∏–∑ process_new_admin_display_name")

