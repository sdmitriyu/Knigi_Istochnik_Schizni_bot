from peewee import Model, SqliteDatabase, CharField, DecimalField, IntegerField, DateTimeField, TextField, SQL, FloatField, ForeignKeyField
from datetime import datetime

# –°–æ–∑–¥–∞–µ–º –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∑–¥–µ—Å—å)
db = SqliteDatabase(None, check_same_thread=False)

class BaseModel(Model):
    class Meta:
        database = db

class Books(BaseModel):
    id = IntegerField(primary_key=True)
    name = CharField()
    author = CharField()
    price = FloatField()
    description = TextField()
    photo = CharField()
    quantity = IntegerField()

class OrderStatus(BaseModel):
    name = CharField(unique=True)  # –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    description = TextField()  # –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    client_message = TextField()  # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    emoji = CharField()  # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞

    class Meta:
        table_name = 'order_statuses'

    @classmethod
    def get_default_statuses(cls):
        return [
            {
                'name': 'new',
                'description': '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑',
                'client_message': '–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –∏ –æ–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.',
                'emoji': 'üÜï'
            },
            {
                'name': 'processing',
                'description': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
                'client_message': '–í–∞—à –∑–∞–∫–∞–∑ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.',
                'emoji': '‚öôÔ∏è'
            },
            {
                'name': 'supplier_notified',
                'description': '–ü–æ—Å—Ç–∞–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω',
                'client_message': '–ü–æ—Å—Ç–∞–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –≤–∞—à–µ–º –∑–∞–∫–∞–∑–µ.',
                'emoji': 'üì¢'
            },
            {
                'name': 'book_taken',
                'description': '–ö–Ω–∏–≥–∞ –∑–∞–±—Ä–∞–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º',
                'client_message': '–ö–Ω–∏–≥–∞ –∑–∞–±—Ä–∞–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º –∏ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ.',
                'emoji': 'üì¶'
            },
            {
                'name': 'in_transit',
                'description': '–í –ø—É—Ç–∏',
                'client_message': '–í–∞—à –∑–∞–∫–∞–∑ –≤ –ø—É—Ç–∏.',
                'emoji': 'üöö'
            },
            {
                'name': 'delivered',
                'description': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
                'client_message': '–í–∞—à –∑–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!',
                'emoji': '‚úÖ'
            },
            {
                'name': 'cancelled',
                'description': '–û—Ç–º–µ–Ω–µ–Ω',
                'client_message': '–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.',
                'emoji': '‚ùå'
            }
        ]

class Order(BaseModel):
    id = IntegerField(primary_key=True)
    telegram_id = IntegerField()
    fio = CharField()
    addres = CharField()
    phone = CharField()
    book_id = ForeignKeyField(Books)
    book_info = TextField()
    status = ForeignKeyField(OrderStatus, backref='orders', default='new')
    created_at = DateTimeField(default=datetime.now)
    updated_at = DateTimeField(default=datetime.now)

    def save(self, *args, **kwargs):
        self.updated_at = datetime.now()
        return super(Order, self).save(*args, **kwargs)

class Greeting(BaseModel):
    text = TextField()

class GalleryText(BaseModel):
    text = TextField()

class OrderPretext(BaseModel):
    text = TextField()

class Admin(BaseModel):
    user_id = IntegerField(unique=True)
    user_name = CharField()
    phone = CharField()

def initialize_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    # db.connect()
    db.create_tables([Books, Order, Greeting, Admin, GalleryText, OrderPretext, OrderStatus], safe=True)
    # db.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
